fs = require "fs"
path = require "path"
_ = require "lodash"
mkpath = require "mkpath"
glob = require "glob"
Hogan = require "hogan.js"
gaze = require "gaze"
exec = (require "child_process").exec

# ANSI Terminal Colors
bold = "\x1b[0;1m"
green = "\x1b[0;32m"
reset = "\x1b[0m"
red = "\x1b[0;31m"

logError = (err) -> console.log "#{red}!#{reset} #{bold}#{err}#{reset}"

logFileCreation = (filename) -> console.log "#{green}>#{reset} Created file: #{bold}%s#{reset}", filename

log = (message, color, explanation) -> console.log color + message + reset + ' ' + (explanation or '')

# compileCoffee = (filename, output) ->
#   log ?= true
#   fs.readFile filename, { encoding: "utf8" }, (err, data) ->
#     return logError err if err
#     outputDir = path.join output, (path.dirname filename)
#     outputJsFilename = path.join output, (filename.replace(/\.coffee$/, ".js"))
#     outputMapFilename = path.join output, (filename.replace(/\.coffee$/, ".map"))
#     mkpath.sync outputDir
#     compiled = coffee.compile data,
#       sourceMap: true
#       sourceRoot: path.relative (path.dirname filename), __dirname
#       sourceFiles: [filename]
#       generatedFile: path.basename outputJsFilename
#     compiledJS = "//# sourceMappingURL=#{path.relative outputDir, outputMapFilename}\n#{compiled.js}"
#     fs.writeFile outputJsFilename, compiledJS, { encoding: "utf8" }, (err) ->
#       return logError err if err
#       logFileCreation outputJsFilename
#     fs.writeFile outputMapFilename, compiled.v3SourceMap, { encoding: "utf8" }, (err) ->
#       return logError err if err
#       logFileCreation outputMapFilename

compileHogan = (filename, output, log) ->
  log ?= true
  fs.readFile filename, { encoding: "utf8" }, (err, data) ->
    return logError err if err
    outputDir = path.join output, (path.dirname filename)
    outputFilename = path.join output, (filename.replace(/\.hjs$/, ".js"))
    mkpath.sync outputDir
    compiled = Hogan.compile data,
      asString: true
    compiled = "var Hogan = require('hogan.js');\nmodule.exports = new Hogan.Template(#{compiled});"
    fs.writeFile outputFilename, compiled, { encoding: "utf8" }, (err) ->
      return logError err if err
      logFileCreation outputFilename if log

forEachGlob = (patterns, fn) ->
  patterns = [patterns] if typeof patterns == "string"
  _.forEach patterns, (pattern) ->
    glob pattern, (err, filenames) ->
      return logError err if err
      _.forEach filenames, fn

copyFile = (filename, output, log) ->
  log ?= true
  mkpath.sync path.join output, path.dirname filename
  fs
    .createReadStream filename
    .pipe fs.createWriteStream path.join output, filename
  logFileCreation path.join output, filename if log

# task "compile:coffeescript", "compile coffeescript files", (options) ->
#   forEachGlob "app/**/*.coffee", (filename) ->
#     compileCoffee filename, "build"

task "copy:coffeescript", "copy coffeescript files", (options) ->
  forEachGlob "app/**/*.coffee", (filename) ->
    copyFile filename, "build"

task "compile:hogan", "compile Hogan templates", (options) ->
  forEachGlob "app/templates/**/*.hjs", (filename) ->
    compileHogan filename, "build"

task "copy:hogan", "copy Hogan templates", (options) ->
  forEachGlob "app/templates/**/*.hjs", (filename) ->
    copyFile filename, "build"

task "bundle", "bundle build/app/client.coffee", (options) ->
  mkpath.sync "build/public"
  exec "cjsify app/client.coffee -r build -m true -s build/public/app.js.map -o build/public/app.js", (err, stdout, stderr) ->
    return logError err if err
    logFileCreation path.normalize "build/public/app.js"
    logFileCreation path.normalize "build/public/app.js.map"

task "watch", "compile files on change", (options) ->
  invoke "copy:coffeescript"
  invoke "compile:hogan"
  invoke "copy:hogan"
  invoke "bundle"
  gaze "app/**/*.coffee", (err, watcher) ->
    handler = (filename) ->
      relativeFilename = path.relative __dirname, filename
      copyFile relativeFilename, "build"
    this.on "changed", handler
    this.on "added", handler
  gaze "app/**/*.hjs", (err, watcher) ->
    handler = (filename) ->
      relativeFilename = path.relative __dirname, filename
      compileHogan relativeFilename, "build"
      copyFile relativeFilename, "build"
    this.on "changed", handler
    this.on "added", handler
  gaze "build/app/client.coffee", (err, watcher) ->
    handler = (filename) ->
      invoke "bundle"
    this.on "changed", handler
    this.on "added", handler